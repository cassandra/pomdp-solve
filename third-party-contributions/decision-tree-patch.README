From VM Sat Jun  3 14:18:40 2006
X-VM-v5-Data: ([nil nil nil nil t nil nil nil nil]
	["1109" "Saturday" "3" "June" "2006" "14:58:36" "-0400" "Trey Smith" "trey@ri.cmu.edu" "<59550433-FCF8-4143-B456-CDA06D50CAB8@ri.cmu.edu>" "30" "Re: pomdp parser" "^From:" nil nil "6" nil nil nil nil nil nil nil nil]
	nil)
Return-path: <trey@ri.cmu.edu>
Envelope-to: arc@cassandra.org
Delivery-date: Sat, 03 Jun 2006 14:58:55 -0400
Received: from cassandr by rome.hostgo.com with local-bsmtp (Exim 4.52)
	id 1FmbKk-0004Up-JY
	for arc@cassandra.org; Sat, 03 Jun 2006 14:58:54 -0400
X-Spam-Status: No, score=-2.6 required=5.0 tests=BAYES_00 autolearn=ham 
	version=3.1.2
X-Spam-Level: 
X-Spam-Checker-Version: SpamAssassin 3.1.2 (2006-05-25) on rome.hostgo.com
Received: from smtp.andrew.cmu.edu ([128.2.10.83])
	by rome.hostgo.com with esmtps (TLSv1:DES-CBC3-SHA:168)
	(Exim 4.52)
	id 1FmbKk-0004UZ-6t
	for arc@cassandra.org; Sat, 03 Jun 2006 14:58:50 -0400
Received: from [192.168.0.102] (c-69-252-191-193.hsd1.fl.comcast.net [69.252.191.193])
	(user=trey mech=GSSAPI (0 bits))
	by smtp.andrew.cmu.edu (8.13.5/8.13.6) with ESMTP id k53IwaTl002362
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=NOT)
	for <arc@cassandra.org>; Sat, 3 Jun 2006 14:58:38 -0400
Mime-Version: 1.0 (Apple Message framework v750)
In-Reply-To: <17535.9564.436453.97543@doom.cassandra.net>
References: <1D9DB186-2170-4515-A380-25A8983782D2@ri.cmu.edu> <17535.9564.436453.97543@doom.cassandra.net>
Content-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed
Message-Id: <59550433-FCF8-4143-B456-CDA06D50CAB8@ri.cmu.edu>
Content-Transfer-Encoding: 7bit
X-Mailer: Apple Mail (2.750)
From: Trey Smith <trey@ri.cmu.edu>
Subject: Re: pomdp parser
Date: Sat, 3 Jun 2006 14:58:36 -0400
To: arc@cassandra.org

Ok, Tony-  Here is the patch to speed up initialization.

   http://miles.frc.ri.cmu.edu:8080/tmp/trey/decision-tree-patch.tgz

The patch hooks into imm-reward.c.  There are two macros in imm- 
reward.c that control how it is used.  Here is the relevant section  
of the code that describes them:

/* Set USE_DECISION_TREE to 1 to use the decision-tree library to speed
    up getImmediateReward() queries. */
#define USE_DECISION_TREE (1)

/* Additionally set CHECK_DECISION_TREE to 1 to run the decision-tree
    library and the original pattern matching approach in parallel, and
    check that all return values match. (Of course, running both is
    slower than running either alone.  This mode is only for  
validation.) */
#define CHECK_DECISION_TREE (0)

I've run it in validation mode on several problems... the results  
were exactly the same as the old implementation in all the tests so  
far, but of course I can't guarantee it is always identical.

On large problems with lots of reward entries the decision tree  
version uses a bit more memory but is much faster.

I hope it's useful,

-Trey


