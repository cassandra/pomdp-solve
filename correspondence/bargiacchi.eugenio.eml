Return-path: <svalorzen@gmail.com>
Envelope-to: tony@cassandra.org
Delivery-date: Wed, 21 May 2014 17:19:22 -0500
Received: from mail-yh0-f44.google.com ([209.85.213.44]:39683)
	by gator3081.hostgator.com with esmtps (TLSv1:RC4-SHA:128)
	(Exim 4.82)
	(envelope-from <svalorzen@gmail.com>)
	id 1WnEr3-0000Cn-MF
	for tony@cassandra.org; Wed, 21 May 2014 17:19:22 -0500
Received: by mail-yh0-f44.google.com with SMTP id b6so2269108yha.17
        for <tony@cassandra.org>; Wed, 21 May 2014 15:19:20 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20120113;
        h=mime-version:date:message-id:subject:from:to:content-type;
        bh=4JzhzFRi3tYfDT3AeMbWBg/as/xVlxDmYyexx/X49nE=;
        b=NMUSdfYbirTH5YIBySPOueUcRtNiaC4euvVN9sURi7HsmTz1lPI9cvSDo+zgMtocUp
         PNkLQhZ5CrXW4owXxtW3zhXTWnYISvNoT4lpOHPQ1XEiCEimfGRP7jmL8Ox3QDc+mbjg
         n9nFy/FSUamNpO8A3blcATn4VPUXXhhONkUUS47pl9PM0bdp3t8c50fRf6NHuMKPHe+X
         0UcnuWW2x1qh/GubydJKg/7PQxMef+UczIHcL6DahtCUbZU4xQOBCwvyJmWa/1teGrL8
         u2OoC0ZTNbz3QtHmWLtwAQunv8OQxsov7pzfsgPRm1Dx16Y99wTq9nBpGcZk0AaURdEY
         /UAQ==
MIME-Version: 1.0
X-Received: by 10.236.91.170 with SMTP id h30mr31184263yhf.143.1400710760054;
 Wed, 21 May 2014 15:19:20 -0700 (PDT)
Received: by 10.170.161.69 with HTTP; Wed, 21 May 2014 15:19:20 -0700 (PDT)
Date: Thu, 22 May 2014 00:19:20 +0200
Message-ID: <CAHfn=+vkXJXBNEM4_fzC=Jyhs-2O_UUyhX=+iMVHxLz7YWMg8w@mail.gmail.com>
Subject: Incremental pruning implementation
From: Eugenio Bargiacchi <svalorzen@gmail.com>
To: tony@cassandra.org
Content-Type: text/plain; charset=UTF-8
X-Spam-Status: No, score=-0.1
X-Spam-Score: 0
X-Spam-Bar: /
X-Spam-Flag: NO

Dear Dr. Cassandra,

I'm an Artificial Intelligence student at the University of Amsterdam,
the Netherlands. I'm currently working on a number of implementations
of both MDP and POMDP solving methods, for fun and learning. I've
recently finished my own implementation of the basic incremental
pruning algorithm, following your code as a guide.

I'm currently testing on the modified AAAI-94 Tiger pomdp problem
released on your webside. My code for some reason obtains slightly
different results from yours above certain horizons (17+). In
particular, my code obtains more alphavectors than your
implementations, while all others are exactly equal down to 24 decimal
digits (the differences between the new ones and the others are <
0.001).

I was wondering if you had any insight on the debugging of such
methods. It seems very strange that for 16 horizons my code would give
precisely the same output as your POMDP code, and fail afterwards, so
I'm at a loss as what to try. Additionally I'm not sure I understand
fully the behaviour of your algorithms with respect to the various
epsilon used to control floating point errors, so maybe I'm failing
there.

I hope to hear from you soon, and many thanks for the code you
released: it is incredibly useful for learning.

Best regards,
Eugenio Bargiacchi
